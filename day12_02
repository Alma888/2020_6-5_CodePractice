# 2020_6-5_CodePractice

//题目：生成格雷码
//在一组数的编码中，若任意两个相邻的代码只有一位二进制数不同， 则称这种编码为格雷码(Gray Code)，
// 请编写一个函数，使用递归的方法生成N位的格雷码。

//给定一个整数n，请返回n位的格雷码，顺序为从0开始。
// 测试样例： 1
// 返回：["0","1"]

//【题目解析】：
//本题是2016年腾讯秋招笔试题原题，套了一个密码学中非常经典的格雷码为背景，大家不要觉得
//密码学一定很难理解，实际上这个题我们通过递归的思路可以很容易解决。
//【解题思路】：
//递归的思路是n位gray码是由n-1位gray码生成，举个例子简单一些：
//比如求n=3的gray码，首先知道n=2的gray码是(00,01,11,10)
//那么n=3的gray码其实就是对n=2的gray码首位添加0或1生成的，添加0后变成(000,001,011,010)
//添加1后需要顺序反向就变成(110,111,101,100)——> 因为格雷码是对称的。
//组合在一起就是(000,001,011,010,110,111,101,100)
import java.util.Arrays;

public class day12_02 {
    public String[] getGray(int n){
        String[] resStrs=null;
        if(n==1){
            resStrs=new String[]{"0","1"};
        }else {
            String[] Strs=getGray(n-1);
            resStrs=new String[2*Strs.length];
            for(int i=0;i<Strs.length;i++){
                resStrs[i]="0"+Strs[i];
                resStrs[resStrs.length-1-i]="1"+Strs[i];
            }
        }
        return resStrs;
    }
    public static void main(String[] args) {
        day12_02 day=new day12_02();
        System.out.println(Arrays.toString(day.getGray(3)));
    }
}
